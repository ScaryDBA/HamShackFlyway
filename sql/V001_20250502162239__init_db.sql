-- Script generated by Redgate Compare v1.30.3.102
SET check_function_bodies = false;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating radio.sales...';END$$;
CREATE TABLE radio.sales (
    sales_id integer NOT NULL,
    sales_date timestamp without time zone
);
ALTER TABLE radio.sales ADD CONSTRAINT sales_pkey PRIMARY KEY (sales_id);
ALTER TABLE radio.sales OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating radio.inventory_item_type...';END$$;
CREATE TABLE radio.inventory_item_type (
    inventory_item_type_id integer NOT NULL,
    invetory_item_desc character varying(50) NOT NULL
);
ALTER TABLE radio.inventory_item_type OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating radio.inventory_item...';END$$;
CREATE TABLE radio.inventory_item (
    inventory_item_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    inventory_item_name character varying(200)
);
ALTER TABLE radio.inventory_item ADD CONSTRAINT inventory_item_pk PRIMARY KEY (inventory_item_id);
ALTER TABLE radio.inventory_item OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating radio.inventory...';END$$;
CREATE TABLE radio.inventory (
    inventory_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    inventory_item_id integer NOT NULL
);
ALTER TABLE radio.inventory ADD CONSTRAINT inventory_pk PRIMARY KEY (inventory_id);
ALTER TABLE radio.inventory OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.kcrocks...';END$$;
CREATE TABLE public.kcrocks (
    id integer
);
ALTER TABLE public.kcrocks OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating radio.inventory.inventory_item_inventory...';END$$;
ALTER TABLE radio.inventory ADD CONSTRAINT inventory_item_inventory FOREIGN KEY (inventory_item_id) REFERENCES radio.inventory_item (inventory_item_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.salesinfo()...';END$$;
CREATE FUNCTION public.salesinfo()
RETURNS TABLE("SalesID" integer, "ProductID" integer, "CustomerID" integer, "StoreID" integer, "Date" date, "Quantity" integer, "Price" numeric, "Cost" numeric, "Total" numeric)
LANGUAGE plpgsql
AS $_$
BEGIN
SELECT *
FROM public.sales AS s;
END;
$_$;
ALTER FUNCTION public.salesinfo() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.inventoryinfo()...';END$$;
CREATE FUNCTION public.inventoryinfo()
RETURNS TABLE(inventory_item_id integer, inventory_item_name character varying, inventory_item_description character varying, inventory_item_price numeric, inventory_item_quantity integer, inventory_item_category character varying, inventory_item_image character varying, inventory_item_status character varying, inventory_item_date_added date, inventory_item_date_modified date, inventory_item_date_recorded date, inventory_item_recorded_by character varying, inventory_item_modified_by character varying, inventory_item_added_by character varying, inventory_item_deleted_by character varying, inventory_item_deleted boolean, inventory_id integer, inventory_name character varying, inventory_description character varying, inventory_date_added date, inventory_date_modified date, inventory_date_recorded date, inventory_recorded_by character varying, inventory_modified_by character varying, inventory_added_by character varying, inventory_deleted_by character varying, inventory_deleted boolean)
LANGUAGE plpgsql
AS $_$
BEGIN
SELECT *
FROM public.inventory AS i
JOIN public.inventory_item as ii
ON i.inventory_item_id = ii.inventorytem_id;
END;
$_$;
ALTER FUNCTION public.inventoryinfo() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.add_test()...';END$$;
CREATE FUNCTION public.add_test()
RETURNS TABLE(radio_id integer, radio_name character varying)
LANGUAGE plpgsql
AS $_$
begin
    select
	*
from
	radio.radios;
end;

$_$;
ALTER FUNCTION public.add_test() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.band...';END$$;
CREATE TYPE public.band AS (
    band_name text,
    upper numeric(7,3),
    lower numeric(7,3)
);
ALTER TYPE public.band OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios...';END$$;
CREATE TABLE radio.radios (
    radio_id integer NOT NULL,
    radio_name character varying(255) NOT NULL,
    bands public.band
);
ALTER TABLE radio.radios OWNER TO postgres;

SET check_function_bodies = true;

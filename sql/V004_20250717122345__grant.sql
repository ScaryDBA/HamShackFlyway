-- Script generated by Redgate Compare v1.37.1.951
SET check_function_bodies = false;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.sales...';END$$;
DROP TABLE radio.sales;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.inventory_item_type...';END$$;
DROP TABLE radio.inventory_item_type;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping public.kcrocks...';END$$;
DROP TABLE public.kcrocks;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping public.salesinfo()...';END$$;
DROP FUNCTION public.salesinfo();


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping public.inventoryinfo()...';END$$;
DROP FUNCTION public.inventoryinfo();


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping public.add_test()...';END$$;
DROP FUNCTION public.add_test();


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.inventory.inventory_item_inventory...';END$$;
ALTER TABLE radio.inventory DROP CONSTRAINT inventory_item_inventory;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.inventory_item...';END$$;
DROP TABLE radio.inventory_item;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.inventory...';END$$;
DROP TABLE radio.inventory;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating timescaledb_toolkit...';END$$;
CREATE EXTENSION timescaledb_toolkit WITH SCHEMA public VERSION '1.19.0';


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating timescaledb...';END$$;
CREATE EXTENSION timescaledb WITH SCHEMA public VERSION '2.19.3';


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating btree_gist...';END$$;
CREATE EXTENSION btree_gist WITH SCHEMA public VERSION '1.7';


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.speedway...';END$$;
CREATE TABLE radio.speedway (
    id integer,
    myvalue character varying(500)
);
ALTER TABLE radio.speedway OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radiobands...';END$$;
CREATE TABLE radio.radiobands (
    radio_id integer NOT NULL,
    band_id integer NOT NULL
);
ALTER TABLE radio.radiobands ADD CONSTRAINT pkradiobands PRIMARY KEY (radio_id, band_id);
ALTER TABLE radio.radiobands OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radioantenna...';END$$;
CREATE TABLE radio.radioantenna (
    radio_id integer NOT NULL,
    antenna_id integer NOT NULL
);
ALTER TABLE radio.radioantenna ADD CONSTRAINT pkradioantenna PRIMARY KEY (radio_id, antenna_id);
ALTER TABLE radio.radioantenna OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.manufacturers...';END$$;
CREATE TABLE radio.manufacturers (
    manufacturer_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    manufacturer_name character varying(100) NOT NULL
);
ALTER TABLE radio.manufacturers ADD CONSTRAINT pkmanufacturers PRIMARY KEY (manufacturer_id);
ALTER TABLE radio.manufacturers OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.digitalmodes...';END$$;
CREATE TABLE radio.digitalmodes (
    digitalmode_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    digitalmode_name character varying(100) NOT NULL
);
ALTER TABLE radio.digitalmodes ADD CONSTRAINT pkdigitalmode PRIMARY KEY (digitalmode_id);
ALTER TABLE radio.digitalmodes OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.countries...';END$$;
CREATE TABLE radio.countries (
    country_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    country_name character varying(100) NOT NULL
);
ALTER TABLE radio.countries ADD CONSTRAINT pkcountry PRIMARY KEY (country_id);
ALTER TABLE radio.countries OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.connectortypes...';END$$;
CREATE TABLE radio.connectortypes (
    connectorytype_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    connectortype_name character varying(100) NOT NULL
);
ALTER TABLE radio.connectortypes ADD CONSTRAINT pkconnectortypes PRIMARY KEY (connectorytype_id);
ALTER TABLE radio.connectortypes OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.bands...';END$$;
CREATE TABLE radio.bands (
    band_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    band_name character varying(100) NOT NULL,
    country_id integer NOT NULL
);
ALTER TABLE radio.bands ADD CONSTRAINT pkbands PRIMARY KEY (band_id);
ALTER TABLE radio.bands OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.antennabands...';END$$;
CREATE TABLE radio.antennabands (
    antenna_id integer NOT NULL,
    band_id integer NOT NULL
);
ALTER TABLE radio.antennabands ADD CONSTRAINT pkantennabands PRIMARY KEY (antenna_id, band_id);
ALTER TABLE radio.antennabands OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.antenna...';END$$;
CREATE TABLE radio.antenna (
    antenna_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    antenna_name character varying(100) NOT NULL,
    manufacturer_id integer NOT NULL,
    connectortype_id integer NOT NULL
);
ALTER TABLE radio.antenna ADD CONSTRAINT pkantenna PRIMARY KEY (antenna_id);
ALTER TABLE radio.antenna OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radiobands.radiobands_band_id_fkey...';END$$;
ALTER TABLE radio.radiobands ADD CONSTRAINT radiobands_band_id_fkey FOREIGN KEY (band_id) REFERENCES radio.bands (band_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.manufacturers_manufacturer_name_unique...';END$$;
CREATE UNIQUE INDEX manufacturers_manufacturer_name_unique ON radio.manufacturers USING btree (manufacturer_name);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.digitalmodes_digitalmode_name...';END$$;
CREATE UNIQUE INDEX digitalmodes_digitalmode_name ON radio.digitalmodes USING btree (digitalmode_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.digitalmodes.digitalmodes_digitalmode_id_fkey...';END$$;
ALTER TABLE radio.digitalmodes ADD CONSTRAINT digitalmodes_digitalmode_id_fkey FOREIGN KEY (digitalmode_id) REFERENCES radio.digitalmodes (digitalmode_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.connectortypes_connectorytype_name...';END$$;
CREATE UNIQUE INDEX connectortypes_connectorytype_name ON radio.connectortypes USING btree (connectorytype_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.bands_band_name_country_id...';END$$;
CREATE UNIQUE INDEX bands_band_name_country_id ON radio.bands USING btree (band_name, country_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.bands.bands_country_id_fkey...';END$$;
ALTER TABLE radio.bands ADD CONSTRAINT bands_country_id_fkey FOREIGN KEY (country_id) REFERENCES radio.countries (country_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.antennabands.antennabands_band_id_fkey...';END$$;
ALTER TABLE radio.antennabands ADD CONSTRAINT antennabands_band_id_fkey FOREIGN KEY (band_id) REFERENCES radio.bands (band_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.antennabands.antennabands_antenna_id_fkey...';END$$;
ALTER TABLE radio.antennabands ADD CONSTRAINT antennabands_antenna_id_fkey FOREIGN KEY (antenna_id) REFERENCES radio.antenna (antenna_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.antenna_antenna_name_unique...';END$$;
CREATE UNIQUE INDEX antenna_antenna_name_unique ON radio.antenna USING btree (antenna_name, manufacturer_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.antenna.antenna_manufacturer_id_fkey...';END$$;
ALTER TABLE radio.antenna ADD CONSTRAINT antenna_manufacturer_id_fkey FOREIGN KEY (manufacturer_id) REFERENCES radio.manufacturers (manufacturer_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.antenna.antenna_connectortype_id_fkey...';END$$;
ALTER TABLE radio.antenna ADD CONSTRAINT antenna_connectortype_id_fkey FOREIGN KEY (connectortype_id) REFERENCES radio.connectortypes (connectorytype_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.newantenna(character varying, integer, integer)...';END$$;
CREATE PROCEDURE radio.newantenna(IN antennaname character varying, IN manufacturerid integer, IN connectortypeid integer)
LANGUAGE plpgsql
AS $_$ 
BEGIN

IF manufacturerid < 1 THEN 
	ROLLBACK;
ELSEIF connectortypeid < 1 THEN 
	ROLLBACK;
ELSE
	INSERT
		INTO
		radio.antenna
	(antenna_name,
	manufacturer_id,
	connectortype_id)
	VALUES
	(antennaname,
	manufacturerid,
	connectortypeid);
END IF;
END
$_$;
ALTER PROCEDURE radio.newantenna(IN antennaname character varying, IN manufacturerid integer, IN connectortypeid integer) OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.addantenna(character varying, integer, integer)...';END$$;
CREATE FUNCTION radio.addantenna(IN antennaname character varying, IN manufacturerid integer, IN connectortypeid integer)
RETURNS void
LANGUAGE sql
AS $_$ 
INSERT
	INTO
	radio.antenna
(antenna_name,
	manufacturer_id,
	connectortype_id)
VALUES
(antennaname,
manufacturerid,
connectortypeid)
$_$;
ALTER FUNCTION radio.addantenna(IN antennaname character varying, IN manufacturerid integer, IN connectortypeid integer) OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.radios.reception...';END$$;
ALTER TABLE radio.radios DROP COLUMN reception;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.radios.transmission...';END$$;
ALTER TABLE radio.radios DROP COLUMN transmission;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping public.transmissiontype...';END$$;
DROP TYPE public.transmissiontype;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping radio.radios.bands...';END$$;
ALTER TABLE radio.radios DROP COLUMN bands;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Dropping public.band...';END$$;
DROP TYPE public.band;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios.digitalmode_id...';END$$;
ALTER TABLE radio.radios ADD COLUMN digitalmode_id integer;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios.connectortype_id...';END$$;
ALTER TABLE radio.radios ADD COLUMN connectortype_id integer NOT NULL;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios.radios_connectortype_id_fkey...';END$$;
ALTER TABLE radio.radios ADD CONSTRAINT radios_connectortype_id_fkey FOREIGN KEY (connectortype_id) REFERENCES radio.connectortypes (connectorytype_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios.picture...';END$$;
ALTER TABLE radio.radios ADD COLUMN picture bytea;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios.manufacturer_id...';END$$;
ALTER TABLE radio.radios ADD COLUMN manufacturer_id integer NOT NULL;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios.radios_manufacturer_id_fkey...';END$$;
ALTER TABLE radio.radios ADD CONSTRAINT radios_manufacturer_id_fkey FOREIGN KEY (manufacturer_id) REFERENCES radio.manufacturers (manufacturer_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Altering radio.radios.radio_name...';END$$;
ALTER TABLE radio.radios ALTER COLUMN radio_name SET DATA TYPE character varying(100);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios_radio_name_manufacturer_id_unique...';END$$;
CREATE UNIQUE INDEX radios_radio_name_manufacturer_id_unique ON radio.radios USING btree (radio_name, manufacturer_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Altering radio.radios.radio_id...';END$$;
ALTER TABLE radio.radios ALTER COLUMN radio_id ADD GENERATED ALWAYS AS IDENTITY;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radiodetails(integer)...';END$$;
CREATE FUNCTION radio.radiodetails(IN radioid integer)
RETURNS TABLE(radio_id integer, radio_name character varying)
LANGUAGE sql
AS $_$
SELECT
	r.radio_id,
	r.radio_name
FROM
	radio.radios AS r
WHERE
	r.radio_id = radioid $_$;
ALTER FUNCTION radio.radiodetails(IN radioid integer) OWNER TO postgres;


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radios.pkradios...';END$$;
ALTER TABLE radio.radios ADD CONSTRAINT pkradios PRIMARY KEY (radio_id);


DO LANGUAGE plpgsql $$BEGIN RAISE NOTICE 'Creating radio.radiobands.radiobands_radio_id_fkey...';END$$;
ALTER TABLE radio.radiobands ADD CONSTRAINT radiobands_radio_id_fkey FOREIGN KEY (radio_id) REFERENCES radio.radios (radio_id);

SET check_function_bodies = true;
